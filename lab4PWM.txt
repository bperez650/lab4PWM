#include <asf.h>


void clockSetup(void);
void wait(volatile int d);
void portSetup(void);
void ADCsetup(void);
void convert(int t);
void Timer4Setup(void);
volatile uint8_t result = 0;
volatile int temp = 0;

int main (void){
	
	system_init();
 	clockSetup();
	portSetup();
	ADCsetup();
	Timer4Setup();
	Port *por = PORT;
	PortGroup *porB = &(por->Group[1]);
	PortGroup *porA = &(por->Group[0]);
	porA->OUTSET.reg = PORT_PA12;
	while(1){
	
		if(temp == 1){
			Tc *tc = TC4;
			TcCount8 *tcc = &tc->COUNT8;
			tcc->CTRLC.bit.INVEN1 = 1;	//clear the inversion
			while(tcc->STATUS.bit.SYNCBUSY){}	//wait for sync 	
			tcc->CC[1].reg = result;	//compare match
			tcc->CC[0].reg = result;	//compare match			
			porA->OUTSET.reg = PORT_PA12;
			//wait(2);
			ADC->CTRLA.reg |= 1<<1;	//re-enable ADC
			while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
			temp = 0;
		}
		
		if(temp == 2){
			Tc *tc = TC4;
			TcCount8 *tcc = &tc->COUNT8;
			tcc->CTRLC.bit.INVEN1 = 0;	//invert signal
			while(tcc->STATUS.bit.SYNCBUSY){}	//wait for sync 	
			tcc->CC[0].reg = 0;	//compare match
			tcc->CC[1].reg = 0;	//compare match
			porA->OUTSET.reg = PORT_PA12;
			//wait(2);
			ADC->CTRLA.reg |= 1<<1;	//re-enable ADC
			while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
			temp = 0;
		}

	}
}

void clockSetup(void){
//setting up the clock source

	/* Various bits in the INTFLAG register can be set to one at startup.
		This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET | SYSCTRL_INTFLAG_DFLLRDY;
	SYSCTRL->OSC8M.bit.PRESC = 3;	//divide the clock by 8	so 1MHz still
	SYSCTRL->OSC8M.bit.ONDEMAND = 1;	//clock is off is no peripheral request
	SYSCTRL->OSC8M.bit.RUNSTDBY = 0;	//clock is off in sleep mode
	SYSCTRL->OSC8M.reg |= 1<<1;	//enable clock
	//SYSCTRL->OSC8M.bit.FRANGE = 2;	//yet another way to control manipulate the clock freq	
	
	SYSCTRL->OSC32K.bit.STARTUP = 0;	//start up asap
	SYSCTRL->OSC32K.bit.ONDEMAND = 1;	//clock is off if no peripheral request
	SYSCTRL->OSC32K.bit.RUNSTDBY = 1;	//clock is on in sleep mode
	SYSCTRL->OSC32K.bit.EN32K = 1;	//enable output
	SYSCTRL->OSC32K.reg |= 1<<1;	//enable clock
	
//setting up the clock generator

	GCLK->CTRL.bit.SWRST = 1;	//reset the generators
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for the reset to complete  
		
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) | GCLK_GENDIV_DIV(1);	//divide generator0 by 1
	
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
	GCLK_GENCTRL_SRC_OSC32K | GCLK_GENCTRL_RUNSTDBY;
	
	//this section chooses what Genclk goes to what peripheral
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for sync to complete  
	GCLK->CLKCTRL.reg |= 0<<14;	//disable clock

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_ADC | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genclk for ADC
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC4_TC5 | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genCLK for TC4
	

	while (GCLK->STATUS.bit.SYNCBUSY==1){}	//waiting for sync to complete  
		
// setting up the CPU and APB and AHB buses clocks
	PM->CPUSEL.bit.CPUDIV = 0;	//divide CPU clock by 1	pg 15
	PM->APBASEL.bit.APBADIV = 0;	//divide apba bus by 1
	PM->APBBSEL.bit.APBBDIV = 0;	//divide apbb bus by 1 
	PM->APBCSEL.bit.APBCDIV = 0;	//divide apbc bus by 1
	PM->APBAMASK.reg |= 1<<3;	//enable the GCLK clock DONT THINK NECESSARY they should be enabled by default pg 159
	PM->APBCMASK.reg |= 1<<16;	//enable the ADC APB
	PM->APBCMASK.reg |= PM_APBCMASK_TC4;	//enable the TC4 APB

}


void portSetup(void){
	Port *por = PORT;
	PortGroup *porA = &(por->Group[0]);
	porA->DIRSET.reg = 1<<12;	//setting up PA13 as output
	PortGroup *porB = &(por->Group[1]);
	porA->PMUX[5].bit.PMUXO = 0;	//mux the ADC to pin PA04 (6=2*n)	AIN[4]
	porA->PINCFG[11].bit.PMUXEN =1;	//enable the MUX
	porB->PMUX[6].bit.PMUXE = 4;	//mux the TC wavegen PA12	pWM output
	porB->PINCFG[12].bit.PMUXEN = 1;	//enable the mux
	//porB->PINCFG[9].bit.DRVSTR = 1;	//high drive on PWM 
	porB->PMUX[6].bit.PMUXO = 4;	//mux the TC wavegen PA13	PWM output
	porB->PINCFG[13].bit.PMUXEN = 1;	//enable the mux
	
	
}

void wait(volatile int d){
	int count = 0;
	while (count < d*1000){
		count++;
	}
}

void ADCsetup(void){
	ADC->CTRLA.reg = 0<<1;	//disable so that we can reset
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for disable to complete
	ADC->CTRLA.bit.SWRST = 1;	//reset
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for reset to complete
	ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;	//internal reference = .5VDDann
	//ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 | ADC_CTRLB_RESSEL_8BIT | ADC_CTRLB_FREERUN | 0<<0 | ADC_CTRLB_CORREN;
	ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 | ADC_CTRLB_RESSEL_8BIT | ADC_CTRLB_FREERUN | 0<<0;
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for sync to complete
	ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_PIN19;	//pin19=AIN19=PA11
	ADC->INPUTCTRL.bit.GAIN = 0xF;	//gain = 1/2
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for sync to complete
		
//loads calibration values from NVM
	short *NVM = (short *) 0x806023;	//address of the ADC calib
	short temp1 = *NVM;
	short temp2 = temp1 & 0x7F8;	//masking unnecessary bits
	temp2 = temp2 >>3;	//shift to the right location
	ADC->CALIB.bit.LINEARITY_CAL = temp2;
	short temp3 = temp1 & 0x3800;	//masking unnecessary bits
	temp3 = temp3 >>11;	//shift to the right location
	ADC->CALIB.bit.BIAS_CAL = temp3;
	ADC->CALIB.bit.LINEARITY_CAL = 0x2;
	ADC->CALIB.bit.BIAS_CAL = 0x7;
		
	ADC->SWTRIG.bit.START = 1;	//start conversion
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for sync to complete
	ADC->INTENSET.reg = ADC_INTENSET_RESRDY;	//setup interrupt when reg is ready to be read	
	ADC->CTRLA.reg |= 1<<1;	//enable ADC
	//while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
	NVIC->ISER[0] |= 1<<23;	//enable the NVIC handler
	ADC->OFFSETCORR.reg = 0b000000110100;	//shift down by 52, 2's comp
	ADC->GAINCORR.reg =   0b100010100000;	//when corren is enabled it enables gain comp too, fractional
}

void ADC_Handler(void){
	Port *por = PORT;
	PortGroup *porB = &(por->Group[1]);
	PortGroup *porA = &(por->Group[0]);
	porA->OUTCLR.reg = PORT_PA12;
	ADC->CTRLA.reg = 0<<1;	//disable ADC
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
	result = ADC->RESULT.reg;
	//temp = 1;
	if(result >= 150){
		temp = 1;
	}
	 else if(result <= 106){
		temp = 1;
	}
	else{
		temp = 2;
	}

	
	
}

void convert(int t){
	volatile int a = t;
	int i = 1000;   //divisor
	int j = 0;  //array counter
	//int a = 4312;   // our value
	volatile char arrADC[4];
	volatile char *arrPtr;
	arrPtr = arrADC;
	int m = 1;  //counter
	int n = 1000;    //increment ot divisor

	while(j <= 3){
		int b = a % i;
		if(b == a) {
			int p = (m-1);
			switch(p) {
				case 0:
				arrADC[j++] = '0';
				break;
				case 1:
				arrADC[j++] = '1';
				break;
				case 2:
				arrADC[j++] = '2';
				break;
				case 3:
				arrADC[j++] = '3';
				break;
				case 4:
				arrADC[j++] = '4';
				break;
				case 5:
				arrADC[j++] = '5';
				break;
				case 6:
				arrADC[j++] = '6';
				break;
				case 7:
				arrADC[j++] = '7';
				break;
				case 8:
				arrADC[j++] = '8';
				break;
				case 9:
				arrADC[j++] = '9';
				break;
				default:
				arrADC[j++] = 'G';
				break;
			}
			a = a - (n*(m-1));
			m = 1;

			if(j == 1){
				i = 100;
				n = 100;
			}
			if(j == 2){
				i = 10;
				n = 10;
			}
			if(j == 3){
				i = 1;
				n = 1;
			}
		}
		else{
			m++;
			i = i + n;
		}
	}
	//write(arrPtr);

}

void Timer4Setup(void){
	Tc *tc = TC4;
	TcCount8 *tcc = &tc->COUNT8;
	tcc->CTRLA.reg = 0;	//disable the TC4
	while(tcc->STATUS.bit.SYNCBUSY){}	//wait for sync of disable
	tcc->CTRLA.bit.PRESCALER = 0;	//divide by 1;
	tcc->CTRLA.bit.WAVEGEN = 2;	//normal PWM frequency per=period, CC1/CC0=compare value
	tcc->CTRLA.bit.MODE = 1;	//8 bit mode	
	tcc->PER.reg = 0xff;
	tcc->CTRLBSET.bit.ONESHOT = 0;	//turn off one shot mode
	while(tcc->STATUS.bit.SYNCBUSY){}	//wait for sync to complete	
	tcc->CTRLA.reg |= 1<<1;	//enable the TC4
	while(tcc->STATUS.bit.SYNCBUSY){}	//wait for sync of disable
	tcc->CTRLC.bit.INVEN1 = 1;
}

void TC4_Handler(void){
	Port *port = PORT;
	PortGroup *porA = &(port->Group[0]);
	porA->DIRSET.reg = 1<<10;
	porA->OUTSET.reg = PORT_PA10;	//turn on power to sensor
	ADC->CTRLA.reg = 1<<1;	//enable ADC
	while (ADC->STATUS.bit.SYNCBUSY==1){}	//wait for enable to complete
	Tc *tc = TC4;
	TcCount8 *tcc = &tc->COUNT8;
	tcc->INTFLAG.bit.OVF = 1;	//clear the interrupt
	
	
}

